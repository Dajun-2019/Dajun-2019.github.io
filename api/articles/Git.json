{"title":"Git","uid":"221a7ad001c03569112f684b2dfdc120","slug":"Git","date":"2023-04-20T12:35:53.000Z","updated":"2023-04-21T05:37:01.425Z","comments":true,"path":"api/articles/Git.json","keywords":null,"cover":[],"content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><h2 id=\"1-Git整体结构\"><a href=\"#1-Git整体结构\" class=\"headerlink\" title=\"1.Git整体结构\"></a>1.Git整体结构</h2><p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20230420210617925.png\" alt=\"image-20230420210617925\"></p>\n<ul>\n<li>工作区：电脑里能看到的目录</li>\n<li>暂存区：<code>.git</code>目录下的index文件（<code>.git/index</code>），也叫做索引（index）</li>\n<li>本地版本库：工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库</li>\n<li>远程仓库</li>\n<li>Git文件状态</li>\n<li>版本</li>\n<li>HEAD：指向master分支的一个游标，所以出现Head的地方可以用master来替换</li>\n<li>分支</li>\n</ul>\n<h2 id=\"2-常用操作\"><a href=\"#2-常用操作\" class=\"headerlink\" title=\"2.常用操作\"></a>2.常用操作</h2><ol>\n<li><p>查看/修改提交用户名、邮箱</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#查看\n$ git config --list\n$ git config user.name\n$ git config user.email\n#不加--global将只更改本仓库的配置\n$ git config --global user.name &quot;dajunnnnnn&quot;\n$ git config --global user.email &quot;1064049895@qq.com&quot;</code></pre></li>\n<li><p>操作流程</p>\n<ol>\n<li><p>初始化：<code>git init</code>，在执行完成 git init命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变</p>\n</li>\n<li><p>克隆：<code>git clone</code>，从现有Git仓库中拷贝项目，例如<code>git clone https://github.com/Dajun-2019/Learning.git</code></p>\n</li>\n<li><p>暂存：<code>git add .</code>，对工作区执行此命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库（.git/objects）中的一个新对象中，而该对象的ID被记录在暂存区的文件索引中</p>\n</li>\n<li><p>提交：<code>git commit -m &quot;注释信息”</code>，暂存区的目录树写到版本库（对象库）中，master分支会做相应的更新，即master指向的目录树就是提交时暂存区的目录树</p>\n</li>\n<li><p>远端操作</p>\n<ul>\n<li>首先载入远程仓库（git clone…）、然后进入此仓库，执行<code>git remote -v</code>，输出的origin为远程地址的别名</li>\n<li>显示某个远程仓库的信息：<code>git remote show [remote]</code></li>\n<li>其他命令<ul>\n<li>添加远程版本库：<code>git remote add origin git@github.com:Dajun-2019/Learning</code></li>\n<li>删除远程仓库：<code>git remote rm name</code></li>\n<li>修改仓库名：’git remote rename old-name new_name’</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>拉取：<code>git fetch origin master:temp</code>（将远程仓库（origin为别名）的master分支的代码下载到本地分支上面）</p>\n</li>\n<li><p>拉去代码并合并：<code>$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p>\n</li>\n<li><p>上传远程代码并合并：<code>git push -u origin master</code>，在git中，“push -u”的意思是将本地的分支版本上传到远程合并，并且记录push到远程分支的默认值；当添加“-u”参数时，表示下次继续push的这个远端分支的时候推送命令就可以简写成“git push”</p>\n</li>\n<li><p>查看状态（git status）：查看仓库当前状态，显示有变更的文件。git status -s简介输出</p>\n</li>\n<li><p>分支操作</p>\n<ul>\n<li><p>创建分支：<code>git branch (branch name)</code></p>\n</li>\n<li><p>查看分支：<code>git branch</code></p>\n</li>\n<li><p>切换分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git checkout (branch name)</code></pre>\n\n<ul>\n<li>当执行 <code>git checkout .</code>或者 <code>git checkout -- &lt;file&gt;</code>命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区中的改动。</li>\n<li>当执行 <code>git checkout HEAD .</code>或者 <code>git checkout HEAD &lt;file&gt;</code>命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</li>\n</ul>\n</li>\n<li><p>删除分支：<code>git branch -d (branch name)</code></p>\n</li>\n<li><p>合并分支：<code>git merge （branch name）</code>（branch name会被合并到主分支）</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"3-实践\"><a href=\"#3-实践\" class=\"headerlink\" title=\"3.实践\"></a>3.实践</h2><ol>\n<li><p>Pull Request流程</p>\n<ol>\n<li><p>把别人的代码fork到自己的仓库</p>\n</li>\n<li><p>在自己的仓库上修改后的分支，摁下New pull request按钮</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20230420210951724.png\" alt=\"image-20230420210951724\"></p>\n</li>\n<li><p>这时，会进入一个新页面，有Base 和 Head 两个选项。Base 是你希望提交变更的目标，Head 是目前包含你的变更的那个分支或仓库</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20230420211002682.png\" alt=\"image-20230420211002682\"></p>\n</li>\n<li><p>填写说明，帮助别人理解你的提交，然后按下”create pull request”按钮即可</p>\n</li>\n<li><p><code>git am</code>用于将一个patch文件，合并进入当前代码（Github 对每个 PR 会自动生成一个 patch 文件），可以下载该文件，合并进本地代码，就可以在本地查看效果了</p>\n</li>\n<li><p>GitHub Flow协作流程</p>\n<ul>\n<li>克隆 / Fork 仓库：git clone …</li>\n<li>创建分支: git branch …</li>\n<li>修改代码:</li>\n<li>发起 Pull Request: git</li>\n<li>Code Review</li>\n<li>Merge 分支</li>\n<li>删除分支</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>本地仓库推送到github上的流程</p>\n<ol>\n<li>确保Github账户上已经添加了本机的SSH key</li>\n<li>在Github上创建一个新的仓库，并且复制对应链接</li>\n<li>切换到本地项目所在目录，执行git init初始化一个本地仓库</li>\n<li>关联远程库：<code>git remote add origin https://github.com/...</code></li>\n<li>进行代码合并，将远程代码下载到本地：<code>git pull --rebase origin master</code></li>\n<li>将本地项目添加到本地仓库<ul>\n<li><code>git add .</code></li>\n<li><code>git commit -m &quot;提交信息&quot;</code></li>\n<li><code>git status</code></li>\n</ul>\n</li>\n<li>推送master分支的所有内容：<code>git push -u origin master</code></li>\n<li>去github上检查仓库是否提交成功</li>\n</ol>\n</li>\n</ol>\n","text":"Git1.Git整体结构 工作区：电脑里能看到的目录 暂存区：.git目录下的index文件（.git/index），也叫做索引（index） 本地版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库 远程仓库 Git文件状态 版本 HEAD：指向master...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"tools","slug":"tools","count":6,"path":"api/tags/tools.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Git\"><span class=\"toc-text\">Git</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Git%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1.Git整体结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2.常用操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">3.实践</span></a></li></ol></li></ol>","author":{"name":"Dajunnnnnn","slug":"blog-author","avatar":"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/dajunnnnnn_psychedelic_eagle_neon_colors_comic_illustration_1ca2dde3-db58-4c04-b835-42e21feffbe8.PNG","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MySQL","uid":"838ae74e3a76757d637de803a615bfd9","slug":"MySQL","date":"2023-04-27T10:54:53.000Z","updated":"2023-05-09T01:07:54.396Z","comments":true,"path":"api/articles/MySQL.json","keywords":null,"cover":null,"text":"MySQL1.SQL语法 数据库概念：数据库（DB）、数据库管理系统（DBMS）、数据库系统（软件+数据库+DBA）、数据库管理员（DBA）、元祖（tuple 一行）、码（列）、候选码（唯一标识元祖）、主码（主键）、外码（另一表的主键）、主属性（候选码中的属性）、非主属性、注释（...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"27 mins."},"categories":[],"tags":[{"name":"database","slug":"database","count":2,"path":"api/tags/database.json"}],"author":{"name":"Dajunnnnnn","slug":"blog-author","avatar":"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/dajunnnnnn_psychedelic_eagle_neon_colors_comic_illustration_1ca2dde3-db58-4c04-b835-42e21feffbe8.PNG","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Kubernetes","uid":"e929ee8c2d932d4d8650d036d3438f62","slug":"Kubernetes","date":"2023-04-20T12:35:42.000Z","updated":"2023-05-06T12:41:27.774Z","comments":true,"path":"api/articles/Kubernetes.json","keywords":null,"cover":[],"text":"Kubernetes Kubernetes 是一个生产级别的容器编排平台和集群管理系统，不仅能够创建、调度容器，还能够监控、管理服务器，它凝聚了 Google 等大公司和开源社区的集体智慧，从而让中小型公司也可以具备轻松运维海量计算节点——也就是“云计算”的能力。 1.Docke...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"tools","slug":"tools","count":6,"path":"api/tags/tools.json"}],"author":{"name":"Dajunnnnnn","slug":"blog-author","avatar":"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/dajunnnnnn_psychedelic_eagle_neon_colors_comic_illustration_1ca2dde3-db58-4c04-b835-42e21feffbe8.PNG","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}