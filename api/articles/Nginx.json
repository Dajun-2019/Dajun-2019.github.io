{"title":"Nginx","uid":"af6a277a1f79cc7652a602f9f57ed64f","slug":"Nginx","date":"2023-05-06T05:10:16.000Z","updated":"2023-05-07T00:21:47.513Z","comments":true,"path":"api/articles/Nginx.json","keywords":null,"cover":[],"content":"<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1><h2 id=\"1-基础知识\"><a href=\"#1-基础知识\" class=\"headerlink\" title=\"1.基础知识\"></a><strong>1.基础知识</strong></h2><h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a><strong>1.安装</strong></h3><ol>\n<li><p>通过源码安装可以指定添加（–with）或删除（–without）某些module</p>\n</li>\n<li><p>主要组成：二进制可执行文件（车，由各模块源码编译出的一个文件）、Nginx.conf配置文件（驾驶员，配置Nginx的行为）、access.log访问日志（GPS，记录每一条http请求信息）、error.log错误日志（黑匣子，定位问题）</p>\n</li>\n<li><p>常用命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ nginx -h #帮助\nnginx version: nginx&#x2F;1.10.1\nUsage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]\n\nOptions:\n  -?,-h         : this help\n  -v            : show version and exit\n  -V            : show version and configure options then exit\n  -t            : test configuration and exit\n  #测试配置文件是否有语法错误\n  -T            : test configuration, dump it and exit\n  -q            : suppress non-error messages during configuration testing\n  #reload|reopen|stop|quit 分别对应：重新加载配置|重启|快速停止|安全关闭nginx\n  -s signal     : send signal to a master process: stop, quit, reopen, reload\n  #制定运行目录\n  -p prefix     : set prefix path (default: &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;nginx&#x2F;1.10.1&#x2F;)\n  #使用指定的配置文件\n  -c filename   : set configuration file (default: &#x2F;usr&#x2F;local&#x2F;etc&#x2F;nginx&#x2F;nginx.conf\n  #制定配置指令\n  -g directives : set global directives out of configuration file</code></pre></li>\n<li><p>常用操作</p>\n<ul>\n<li><p>重载配置文件：<code>nginx -s reload</code>，其他信号有stop、quit、reopen</p>\n<ul>\n<li>流程：向master进程发送HUP信号（reload命令）、master进程校验语法是否正确、master打开新的监听端口、master进程用新配置启动新的worker子进程、master进程向老worker子进程发送QUIT信号、老worker进程关闭监听句柄，处理完当前连接后结束进程</li>\n</ul>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927205628526.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927205628526.png\"></p>\n</li>\n<li><p>热部署：</p>\n<ul>\n<li>找到正在运行nginx的进程并备份现有nginx二进制文件，将编译好的二进制文件拷贝到nginx/sbin目录</li>\n<li>向nginx的master发送热部署信号：<code>kill -USR2 线程号</code>，master进程修改pid文件名加.oldbin后缀，master进程用新nginx文件启动master进程</li>\n<li>待新进程取代老进程后使用<code>kill -WINCH 进程号</code>来关闭旧的worker进程，旧的master保留用于版本回退（向老master发送HUP、向新master发送QUIT）</li>\n</ul>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927205642342.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927205642342.png\"></p>\n</li>\n<li><p>日志切割：拷贝原始日志到新位置、运行<code>nginx -s reopen</code>，生成新的日志文件</p>\n</li>\n</ul>\n</li>\n<li><p>配置语法：nginx/conf/nginx.conf</p>\n<ul>\n<li>配置文件由指令<code>;</code>和指令块<code>&#123;&#125;</code>构成，指令名字与参数间以空格符号分割</li>\n<li>使用<code>#</code>来添加注释，使用<code>$</code>来使用变量</li>\n<li>include语句允许组合多个配置文件已提升可维护性</li>\n<li>配置参数<ul>\n<li>部分指令的参数支持正则表达式</li>\n<li>时间的单位：ms、s、m、h、d、w、M、y</li>\n<li>空间的单位：缺省（bytes）、k/K、m/M、g/G</li>\n</ul>\n</li>\n<li>http配置的指令块<ul>\n<li>http：表示里面所有的指令都由http模块来解析执行</li>\n<li>upstream：上游服务，如tomcat</li>\n<li>server：对应一个/组域名</li>\n<li>location：一个url表达式</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>上下文结构</p>\n<ul>\n<li>main<ul>\n<li>events</li>\n<li>http<ul>\n<li>server<ul>\n<li>location：最长前缀匹配（从后往前的）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220815220322940-20220828174128775-20220927203352442.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220815220322940-20220828174128775-20220927203352442.png\"></p>\n</li>\n<li><p>最长前缀匹配</p>\n<ul>\n<li><p>配置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">server &#123;\n    location &#x2F; &#123;\n        root &#x2F;data&#x2F;www;\n    &#125;\n\n    location &#x2F;images&#x2F; &#123;\n        root &#x2F;data;\n    &#125;\n&#125;</code></pre></li>\n<li><p>示例</p>\n<ul>\n<li><code>http://localhost/images/example.png</code>匹配到<code>/data/images/example.png</code> 文件</li>\n<li><code>http://localhost/some/example.html</code> 匹配到<code>/data/www/some/example.html</code> 文件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>代理服务器</p>\n<ul>\n<li><p>概念：接收请求并将其传送到代理服务器（proxy）上，再从代理服务器上取得响应，最后返回client</p>\n</li>\n<li><p>功能：将静态服务器做为上游，通过一个新的nginx服务器通过负载均衡来访问上游静态服务器，可以做到上层服务器可以在用户无感知的情况下水平扩展</p>\n</li>\n<li><p>示例</p>\n<ul>\n<li><p>配置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 服务器一\nserver &#123;\n    location &#x2F; &#123;\n        proxy_pass &lt;http:&#x2F;&#x2F;localhost:8080&#x2F;&gt;;\n    &#125;\n\n    location ~ \\\\.(gif|jpg|png)$ &#123;\n        root &#x2F;data&#x2F;images;\n    &#125;\n&#125;d&#x3D;\n# 服务器二\nserver &#123;\n    listen 8080;\n    root &#x2F;data&#x2F;up1;\n\n    location &#x2F; &#123;\n    &#125;\n&#125;</code></pre></li>\n<li><p>解释：服务器一会将 <code>.gif</code>, <code>.jpg</code>, or <code>.png</code> 结尾的文件映射到<code>/data/images</code> 目录，其他的请求都会映射到<code>http://localhost:8080/</code>所在的代理服务器上</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-架构基础\"><a href=\"#2-架构基础\" class=\"headerlink\" title=\"2.架构基础\"></a><strong>2.架构基础</strong></h3><ol>\n<li><p>控制Nginx</p>\n<ul>\n<li><p>进程结构</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927204238874.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927204238874.png\"></p>\n</li>\n<li><p>信号</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927204444142.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927204444142.png\"></p>\n<ul>\n<li>蓝色的信号可以通过nginx命令也可以用linux的kill，红色的信号只能通过linux的kill命令</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>事件驱动</p>\n<ul>\n<li><p>网络协议的行为都会对应到读事件或写事件，不同的事件对应着不同的消费者</p>\n</li>\n<li><p>事件驱动模型</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927210609988.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927210609988.png\"></p>\n</li>\n<li><p>请求处理方法</p>\n<ul>\n<li><code>select</code> — standard method. The supporting module is built automatically on platforms that lack more efficient methods. The <code>-with-select_module</code> and <code>-without-select_module</code> configuration parameters can be used to forcibly enable or disable the build of this module.</li>\n<li><code>poll</code> — standard method. The supporting module is built automatically on platforms that lack more efficient methods. The <code>-with-poll_module</code> and <code>-without-poll_module</code> configuration parameters can be used to forcibly enable or disable the build of this module.</li>\n<li><code>kqueue</code> — efficient method used on FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0, and macOS.</li>\n<li>epoll— efficient method used on Linux 2.6+.<ul>\n<li>将连接用两种数据结构存储，活跃连接使用双向链表高效查找、普通连接使用红黑树高效增删</li>\n</ul>\n</li>\n<li><code>/dev/poll</code> — efficient method used on Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+, and Tru64 UNIX 5.1A+.</li>\n<li><code>eventport</code> — event ports, method used on Solaris 10+ (due to known issues, it is recommended using the <code>/dev/poll</code> method instead).</li>\n</ul>\n</li>\n<li><p>请求切换：</p>\n<ul>\n<li>传统apach、tomcat一进程进处理一连接，依赖OS进程调度实现并发</li>\n<li>nginx一线程同时处理多连接，用户态代码完成连接请求切换，尽量减少OS进程切换</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>module</p>\n<ul>\n<li><p>文档里面有指令、变量等相关信息，第三方module也可以通过源码（src目录）的方式查看</p>\n<ul>\n<li><p>ngx_command_t数组里包含可以指定的指令名和参数</p>\n</li>\n<li><p>ngx_module_t是通用模块，会定义module的顺序，还有很多启停回调方法</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927214539700.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927214539700.png\"></p>\n</li>\n<li><p>根据不同的应用细分为子模块：ngx_core_module_t、ngx_http_module_t、ngx_event_module_t等</p>\n</li>\n</ul>\n</li>\n<li><p>通过ngx_modules.c里面的ngx_modules数组可以知道都有哪些module编译进nginx</p>\n</li>\n<li><p>module分类：通过core module定义一类新的模块，而不是全都放到核心代码里</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927214625501.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927214625501.png\"></p>\n</li>\n</ul>\n</li>\n<li><p>连接池</p>\n<ul>\n<li>通过worker_connections number;来指定当worker进程启动时同时打开的连接数</li>\n<li>每个连接由两部分组成<ul>\n<li>每个connection的结构体为ngx_connection_s</li>\n<li>每个connection对应两个事件读事件和写事件，结构体均为ngx_event_s</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>其他</p>\n<ol>\n<li><p>内存池</p>\n<ul>\n<li>连接内存池：ngx_http_core_module的connection_pool_size</li>\n<li>请求内存池：ngx_http_core_module的request_pool_size</li>\n</ul>\n</li>\n<li><p>进程间通信</p>\n<ul>\n<li>信号</li>\n<li>共享内存</li>\n<li>Slab内存管理器</li>\n</ul>\n</li>\n<li><p>容器</p>\n<ul>\n<li><p>数组、链表、队列</p>\n</li>\n<li><p>哈希表：ngx_hash_t</p>\n<ul>\n<li><p>结构如下</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927223506923.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927223506923.png\"></p>\n</li>\n<li><p>配置如下</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927223303911.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927223303911.png\"></p>\n</li>\n</ul>\n</li>\n<li><p>红黑树：ngx_rbtree_t，红黑树的使用模块如下</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927223357768.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220927223357768.png\"></p>\n</li>\n<li><p>基数树</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"3-源码进阶\"><a href=\"#3-源码进阶\" class=\"headerlink\" title=\"3.源码进阶\"></a><strong>3.源码进阶</strong></h3><h2 id=\"2-HTTP\"><a href=\"#2-HTTP\" class=\"headerlink\" title=\"2.HTTP\"></a><strong>2.HTTP</strong></h2><h3 id=\"1-基础\"><a href=\"#1-基础\" class=\"headerlink\" title=\"1.基础\"></a><strong>1.基础</strong></h3><ul>\n<li><p>指令分类：值指令（存储配置项的值）、动作类指令（指定行为）</p>\n</li>\n<li><p>指令合并：值指令可以合并，动作类指令不可以合并</p>\n</li>\n<li><p>指令覆盖：值指令会向上覆盖，子配置不存在时，直接使用父配置块；子配置存在时，直接覆盖父配置块</p>\n</li>\n<li><p>正则表达式</p>\n<ul>\n<li><p>元字符与重复</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928195807337.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928195807337.png\"></p>\n</li>\n<li><p>\\转义符号，取消元字符的特殊含义；()分组与取值，0是原始字符串，后面的从1开始</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-流程概览\"><a href=\"#2-流程概览\" class=\"headerlink\" title=\"2.流程概览\"></a><strong>2.流程概览</strong></h3><ol>\n<li><p>处理HTTP请求头部的流程</p>\n<ul>\n<li><p>接受请求事件模块</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928194323905.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928194323905.png\"></p>\n</li>\n<li><p>接受请求HTTP模块（复用<strong>large_client_header_buffers</strong>）</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928194340032.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928194340032.png\"></p>\n</li>\n</ul>\n</li>\n<li><p>HTTP请求处理的11个阶段</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928194528044.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928194528044.png\"></p>\n<ul>\n<li>第一个rewrite是server_rewrite阶段、第二个是rewrite阶段，所以server下的rewrite阶段会先执行</li>\n<li>find_config见core module的location</li>\n</ul>\n</li>\n<li></li>\n</ol>\n<h3 id=\"3-常用module\"><a href=\"#3-常用module\" class=\"headerlink\" title=\"3.常用module\"></a><strong>3.常用module</strong></h3><ol>\n<li><p>ngx_http_core_module</p>\n<ol>\n<li><p>listen</p>\n<ul>\n<li>使用示例<ul>\n<li>设置IP的address和port：<code>listen 127.0.0.1:8000;</code>、<code>listen 80;</code></li>\n<li>UNIX-domain socket的path：<code>listen unix:/var/run/nginx.sock;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>决定使用那个server块处理请求</p>\n<ul>\n<li>server_name<ul>\n<li>域名的形式：一个或多个明确的域名、在域名前/后使用*的泛域名、正则表达式（加～前缀）</li>\n<li>server_name_in_redirect：访问次域名返回302重定向时，使用主域名来重定向<ul>\n<li>匹配顺序：精确匹配、*在前的泛域名、*在后的泛域名、按文件中的顺序匹配正则表达式域名、default server块处理（默认第1个server，通过listen指定default来特定default server）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>location</p>\n<ul>\n<li><p>匹配规则</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928212715402.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928212715402.png\"></p>\n</li>\n<li><p>匹配顺序</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928212759547.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928212759547.png\"></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>postread阶段</p>\n<ul>\n<li><p>ngx_http_realip_module</p>\n<ul>\n<li><strong>如何拿到真实用户的IP地址：</strong>TCP连接四元组、HTTP头部X-Forward-For用于传递IP、HTTP头部X-Real-IP用于传递用户IP、网络中存在许多反向代理</li>\n<li><strong>真实用户IP使用方式：</strong>nginx会用拿到的真实IP覆盖binary_remote_addr、remote_addr这样的变量，所以其值就是真实的IP，要使用变量操作，这样可以很好的解耦</li>\n<li><strong>变量：</strong>ngx_http_realip_module主要用于修改客户端地址，并生成realip_remote_addr、realip_remote_port两个新变量</li>\n<li>指令：<ul>\n<li><strong>set_real_ip_from</strong> <em>address</em> | <em>CIDR</em> | unix: ;指定真实IP</li>\n<li><strong>real_ip_header</strong> <em>field</em> | X-Real-IP | X-Forwarded-For | proxy_protocol;从哪拿到真实IP</li>\n<li><strong>real_ip_recursive</strong> on | off; 跳过本机环回地址d</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>ngx_http_rewrite_module</p>\n<ul>\n<li><p>return：Stops processing and returns the specified code to a client.</p>\n<ul>\n<li>rewrite module的return指令与core module的error_page指令<ul>\n<li>error_page指令指定收到返回码返回另一个uri</li>\n<li>return指令会覆盖error_page指令</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>rewrite指令（开启<strong>rewrite_log</strong>，会写入error.log）</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928211853181.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928211853181.png\"></p>\n</li>\n<li><p>if：条件为真，则执行大括号内的指令</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928212241741.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928212241741.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>preacess阶段</p>\n<ul>\n<li><p>ngx_http_limit_req_module：限制每个客户端的每秒处理请求数</p>\n<ul>\n<li><p>生效范围：全部worker进程（基于共享内存），只在preaccess阶段生效，依赖postread阶段的realip模块取到真实ip</p>\n</li>\n<li><p><strong>limit_req_zone</strong> <em>key</em> zone=<em>name</em>:<em>size</em> rate=<em>rate</em> ;：定义共享内存及大小、key关键字、限制速率（r/s 或 r/m）</p>\n</li>\n<li><p><strong>limit_req</strong> zone=<em>name</em> [burst=<em>number</em>] [nodelay];：限制并发连接数，burst为连接数，nodelay对brust中的请求不再采用延时处理的方法，而是立刻处理</p>\n</li>\n<li><p>示例</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">limit_req_zone $binary_remote_addr zone&#x3D;one:10m rate&#x3D;1r&#x2F;s;\n\nserver &#123;\n    location &#x2F;search&#x2F; &#123;\n        limit_req zone&#x3D;one burst&#x3D;5;\n    &#125;</code></pre></li>\n</ul>\n</li>\n<li><p>ngx_http_limit_conn_module：限制每个客户端的并发连接数</p>\n<ul>\n<li><p>生效范围：全部worker进程（基于共享内存），只在preaccess阶段生效，依赖postread阶段的realip模块取到真实ip</p>\n</li>\n<li><p><strong>limit_conn_zone</strong> <em>key</em> zone=<em>name</em>:<em>size</em>;：</p>\n</li>\n<li><p><strong>limit_conn</strong> <em>zone number</em>;：设置共享内存空间和给定key值的最大允许连接数，超过连接时会向request返回error</p>\n</li>\n<li><p>示例</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">limit_conn_zone $binary_remote_addr zone&#x3D;addr:10m;\n\nserver &#123;\n    location &#x2F;download&#x2F; &#123;\n        limit_conn addr 1;\n    &#125;</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>access阶段</p>\n<ul>\n<li><p>ngx_http_access_module：限制某些IP地址的访问权限</p>\n<ul>\n<li><strong>allow</strong> <em>address</em> | <em>CIDR</em> | unix: | all;</li>\n<li><strong>deny</strong> <em>address</em> | <em>CIDR</em> | unix: | all;</li>\n</ul>\n</li>\n<li><p>ngx_http_auth_basic_module</p>\n<ul>\n<li>基于HTTP Basic Authutication协议进行用户名密码的认证</li>\n<li><strong>auth_basic</strong> <em>string</em> | off;</li>\n<li><strong>auth_basic_user_file</strong> <em>file</em>;</li>\n</ul>\n</li>\n<li><p>ngx_http_auth_request_module</p>\n<ul>\n<li>使用第三方做权限控制，向上游服务器转发请求，若返回2xx，则继续执行，否则将响应返回客户端。即在收到请求后，生成字请求，通过反向代理技术把请求传递给上游服务</li>\n<li><strong>auth_request</strong> <em>uri</em> | off;</li>\n<li><strong>auth_request_set</strong> <em>$variable value</em>;</li>\n</ul>\n</li>\n<li><p>satisfy（core module的）：改变access模块的执行逻辑，代码的顺序不起作用</p>\n<p><img src=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928222125102.png\" alt=\"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/image-20220928222125102.png\"></p>\n</li>\n</ul>\n</li>\n<li><p>precontent阶段</p>\n<ul>\n<li>try_files（core module）<ul>\n<li>语法：<strong>try_files</strong> <em>file</em> … <em>uri</em>; 或者 <strong>try_files</strong> <em>file</em> … =<em>code</em>;</li>\n<li>依次试图访问多个url对应的文件（路径由root或者alias指令指定），当文件存在时直接返回文件内容，如果所有文件都不存在，则按最后一个URL结果或者code返回</li>\n</ul>\n</li>\n<li>ngx_http_mirror_module<ul>\n<li>用于实时拷贝流量，处理请求时，生成子请求访问其他服务，对子请求的返回值不做处理。可以使得测试和开发环境受到相同的请求</li>\n<li>mirror：指定子请求的uri</li>\n<li>mirror_request_body：指定是否转发包体</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>content阶段</p>\n<ul>\n<li>core module（11阶段图中的static）<ul>\n<li>root和alias<ul>\n<li>功能：将url映射为文件路径，以返回静态文件内容</li>\n<li>区别：root会将完整url映射进文件路径中，alias只会将location后的url映射到文件路径</li>\n</ul>\n</li>\n<li>生成待访问文件的三个相关变量<ul>\n<li>request_filename：待访问<strong>文件</strong>的完整路径</li>\n<li>document_root：由URL和root、alias规则生成的<strong>文件夹</strong>路径</li>\n<li>realpath_root：将document_root中的软链接等换成真实路径</li>\n</ul>\n</li>\n<li>type（core module）：用来指定后缀的映射</li>\n<li>当访问目录时url最后没有带/时，会返回301重定向，可以通过<strong>server_name_in_redirect</strong>、 <strong>port_in_redirect</strong> 、<strong>absolute_redirect</strong>指令来指定重定向跳转的域名</li>\n</ul>\n</li>\n<li>concat<ul>\n<li>当页面需要多个小文件时，把它们的内容合并到一次http响应中返回，提升性能</li>\n<li>使用方法：下载源码、在配置时通过add-module指定加入</li>\n</ul>\n</li>\n<li>ngx_http_random_index_module：</li>\n<li>ngx_http_index_module：指定<code>/</code>访问时返回index文件内容</li>\n<li>ngx_http_autoindex_module：随机选择index指令指定的一系列index文件中的一个，作为/路径的返回文件内容。当URL以/结尾时，尝试以html、xml、json、jsonp等格式返回root/alias中<strong>指定目录的目录结构</strong></li>\n</ul>\n</li>\n<li><p>log阶段</p>\n<ul>\n<li>ngx_http_log_module：用于记录access日志，将http请求相关信息记录到日志<ul>\n<li>log_format：指定日志格式</li>\n<li>access_log：配置日志文件路径</li>\n<li>open_log_file_cache：对日志文件名包含变量时的优化，为日志打开缓存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>其他</p>\n<ol>\n<li>过滤模块：content阶段之后，log阶段之前<ul>\n<li>源码中重点的filter<ul>\n<li>ngx_http_copy_filter_module：复制包体内容</li>\n<li>ngx_http_postpone_filter_module：处理子请求</li>\n<li>ngx_http_header_filter_module：构造响应头部</li>\n<li>ngx_http_write_fiter_module：发送响应</li>\n</ul>\n</li>\n<li>ngx_http_sub_filter_module：将响应中指定的字符串替换成新的字符串</li>\n<li>ngx_http_addition_filter_module：在响应前后或后增加内容，增加的方式是通过新url响应完成</li>\n</ul>\n</li>\n<li>变量<ul>\n<li>变量的特性：惰性求值、变量值随时刻变化</li>\n<li>HTTP框架提供的变量：见PDF<ul>\n<li>HTTP请求相关</li>\n<li>TCP连接相关</li>\n<li>Nginx处理请求过程中产生的</li>\n<li>发送HTTP响应时相关的变量</li>\n<li>Nginx系统变量</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其他模块<ul>\n<li>放盗链：拒绝非正常的网站访问我们站点的资源<ul>\n<li>referer</li>\n<li>secure_link</li>\n</ul>\n</li>\n<li>map：通过映射新变量提供，为其他基于变量值实现功能的模块提供更多的可能性</li>\n<li>split_client：实现AB测试</li>\n<li>geo：根据客户端地址创建新变量</li>\n<li>geoip：基于MaxMind数据库从客户端地址获取变量</li>\n<li>keepalive：多个HTTP请求复用TCP连接</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"3-Reverse-Proxy-amp-Load-Balancer\"><a href=\"#3-Reverse-Proxy-amp-Load-Balancer\" class=\"headerlink\" title=\"3.Reverse Proxy &amp; Load Balancer\"></a><strong>3.Reverse Proxy &amp; Load Balancer</strong></h2><h3 id=\"1-负载均衡机制概览\"><a href=\"#1-负载均衡机制概览\" class=\"headerlink\" title=\"1.负载均衡机制概览\"></a><strong>1.负载均衡机制概览</strong></h3><ol>\n<li>round-robin — requests to the application servers are distributed in a round-robin fashion,</li>\n<li>least-connected — next request is assigned to the server with the least number of active connections,</li>\n<li>ip-hash — a hash-function is used to determine what server should be selected for the next request (based on the client’s IP address).</li>\n</ol>\n<h3 id=\"2-upstream\"><a href=\"#2-upstream\" class=\"headerlink\" title=\"2.upstream\"></a><strong>2.upstream</strong></h3><h3 id=\"3-HTTP反向代理流程\"><a href=\"#3-HTTP反向代理流程\" class=\"headerlink\" title=\"3.HTTP反向代理流程\"></a><strong>3.HTTP反向代理流程</strong></h3>","text":"Nginx1.基础知识1.安装 通过源码安装可以指定添加（–with）或删除（–without）某些module 主要组成：二进制可执行文件（车，由各模块源码编译出的一个文件）、Nginx.conf配置文件（驾驶员，配置Nginx的行为）、access.log访问日志（GPS，记...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"tools","slug":"tools","count":6,"path":"api/tags/tools.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Nginx\"><span class=\"toc-text\">Nginx</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">1.基础知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1.安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">2.架构基础</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%BA%90%E7%A0%81%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">3.源码进阶</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-HTTP\"><span class=\"toc-text\">2.HTTP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">1.基础</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%B5%81%E7%A8%8B%E6%A6%82%E8%A7%88\"><span class=\"toc-text\">2.流程概览</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E7%94%A8module\"><span class=\"toc-text\">3.常用module</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-Reverse-Proxy-amp-Load-Balancer\"><span class=\"toc-text\">3.Reverse Proxy &amp; Load Balancer</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%BA%E5%88%B6%E6%A6%82%E8%A7%88\"><span class=\"toc-text\">1.负载均衡机制概览</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-upstream\"><span class=\"toc-text\">2.upstream</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-HTTP%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">3.HTTP反向代理流程</span></a></li></ol></li></ol></li></ol>","author":{"name":"Dajunnnnnn","slug":"blog-author","avatar":"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/dajunnnnnn_psychedelic_eagle_neon_colors_comic_illustration_1ca2dde3-db58-4c04-b835-42e21feffbe8.PNG","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"SpringCloud","uid":"2fdfe1e1ace8a4912a23a4cbc1c92824","slug":"SpringCloud","date":"2023-05-09T08:41:29.000Z","updated":"2023-05-09T08:44:35.338Z","comments":true,"path":"api/articles/SpringCloud.json","keywords":null,"cover":null,"text":"Spring Cloud1.Consul2.OpenFeign3.Resilience4j4.SpringBootAdmin5.Sleuth6.Seata7.RabbitMQ8.Gateway","link":"","photos":[],"count_time":{"symbolsCount":96,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"tools","slug":"tools","count":6,"path":"api/tags/tools.json"}],"author":{"name":"Dajunnnnnn","slug":"blog-author","avatar":"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/dajunnnnnn_psychedelic_eagle_neon_colors_comic_illustration_1ca2dde3-db58-4c04-b835-42e21feffbe8.PNG","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Spring Family","uid":"0eecce2180060832c1ffa34a76f3eb3b","slug":"Spring","date":"2023-05-06T05:09:43.000Z","updated":"2023-05-10T07:50:07.762Z","comments":true,"path":"api/articles/Spring.json","keywords":null,"cover":[],"text":"Spring1.IOC1.基础知识 BeanFactory：提供了一种高级配置，能够管理任何类型对象，BeanFactory是ApplicationContext的父接口，ApplicationContext接口的实现类主要有ClassPathXmlApplicationCont...","link":"","photos":[],"count_time":{"symbolsCount":"53k","symbolsTime":"48 mins."},"categories":[],"tags":[{"name":"tools","slug":"tools","count":6,"path":"api/tags/tools.json"}],"author":{"name":"Dajunnnnnn","slug":"blog-author","avatar":"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/dajunnnnnn_psychedelic_eagle_neon_colors_comic_illustration_1ca2dde3-db58-4c04-b835-42e21feffbe8.PNG","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}