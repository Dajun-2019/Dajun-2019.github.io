{"title":"SpringBoot","uid":"af912e0d33a827f03582ef107fe8a87d","slug":"SpringBoot","date":"2023-05-09T08:43:50.000Z","updated":"2023-05-10T07:51:37.092Z","comments":true,"path":"api/articles/SpringBoot.json","keywords":null,"cover":null,"content":"<h1 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h1><h2 id=\"1-Annotation\"><a href=\"#1-Annotation\" class=\"headerlink\" title=\"1.Annotation\"></a>1.Annotation</h2><ol>\n<li><p><code>@Autowired</code>：原理见自动装配</p>\n<ol>\n<li><p>用在构造函数上，Spring4.3开始不再需要，但如果有多个构造函数则需要使用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MovieRecommender &#123;\n    private final CustomerPreferenceDao customerPreferenceDao;\n    @Autowired\n    public MovieRecommender(CustomerPreferenceDao customerPreferenceDao) &#123;\n        this.customerPreferenceDao &#x3D; customerPreferenceDao;\n    &#125;\n    &#x2F;&#x2F; ...\n&#125;</code></pre></li>\n<li><p>用于传统的setter方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class SimpleMovieLister \n    private MovieFinder movieFinder;\n    @Autowired\n    public void setMovieFinder(MovieFinder movieFinder) &#123;\n        this.movieFinder &#x3D; movieFinder;\n    &#125;\n    &#x2F;&#x2F; ...\n&#125;</code></pre></li>\n<li><p>用于字段，甚至可以将其与构造函数混用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MovieRecommender &#123;\n\n    private final CustomerPreferenceDao customerPreferenceDao;\n    @Autowired\n    private MovieCatalog movieCatalog;\n    @Autowired\n    public MovieRecommender(CustomerPreferenceDao customerPreferenceDao) &#123;\n        this.customerPreferenceDao &#x3D; customerPreferenceDao;\n    &#125;\n    &#x2F;&#x2F; ...\n&#125;</code></pre></li>\n</ol>\n</li>\n<li><p><code>@Primary</code>表示当多个bean成为自动装配的候选者时，应该优先考虑特定的bean</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MovieConfiguration &#123;\n\n    @Bean\n    @Primary\n    public MovieCatalog firstMovieCatalog() &#123; ... &#125;\n\n    @Bean\n    public MovieCatalog secondMovieCatalog() &#123; ... &#125;\n    &#x2F;&#x2F; ...\n&#125;\npublic class MovieRecommender &#123;\n\t&#x2F;&#x2F;自动装配firstMovieCatalog\n    @Autowired\n    private MovieCatalog movieCatalog;\n    &#x2F;&#x2F; ...\n&#125;</code></pre></li>\n<li><p><code>@Qualifier</code>：可以将限定符值与特定参数相关联，缩小类型匹配的范围，以便为每个参数选择特定的bean：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MovieRecommender &#123;\n\n    private MovieCatalog movieCatalog;\n    private CustomerPreferenceDao customerPreferenceDao;\n\n    @Autowired\n    public void prepare(@Qualifier(&quot;main&quot;) MovieCatalog movieCatalog,\n                        CustomerPreferenceDao customerPreferenceDao) &#123;\n        this.movieCatalog &#x3D; movieCatalog;\n        this.customerPreferenceDao &#x3D; customerPreferenceDao;\n    &#125;\n    &#x2F;&#x2F; ...\n&#125;</code></pre></li>\n<li><p><code>@Resource</code>：采用名称属性，默认将该值解释为要注入的bean名称，如果没有明确指定名称，如果是字段，则采用字段名称，如果是setter方法，则采用bean属性名称</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class SimpleMovieLister &#123;\n\n    private MovieFinder movieFinder;\n    @Resource(name&#x3D;&quot;myMovieFinder&quot;) \n    public void setMovieFinder(MovieFinder movieFinder) &#123;\n        this.movieFinder &#x3D; movieFinder;\n    &#125;\n&#125;</code></pre></li>\n<li><p><code>@Value</code>：通常用于注入外部化属性</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class MovieRecommender &#123;\n\n    private final String catalog;\n    &#x2F;&#x2F;application.properties中有catalog.name&#x3D;MovieCatalog\n    &#x2F;&#x2F;catalog的值就为MovieCatalog\n    public MovieRecommender(@Value(&quot;$&#123;catalog.name&#125;&quot;) String catalog) &#123;\n        this.catalog &#x3D; catalog;\n    &#125;\n&#125;\n&#x2F;&#x2F;还需以下配置\n@Configuration\n@PropertySource(&quot;classpath:application.properties&quot;)\npublic class AppConfig &#123; &#125;</code></pre></li>\n<li><p><code>@Compoent</code>：</p>\n<ol>\n<li><p>任何满足存储库角色（DAO）的类的标记，用途是异常的自动翻译，类似的其它原型注解有：<code>@Controller（表示层）</code>、<code>@Service（服务层）</code>、<code>@Repository（持久层）</code>，尽量不选<code>@Component</code>而选后面那三个</p>\n</li>\n<li><p>Spring能自动检测原型类，并使用<code>ApplicationContext</code>注册相应的<code>BeanDefinition</code>实例，要自动检测这些类并注册相应的bean，需要将<code>@ComponentScan(basePackages = &quot;org.example&quot;)</code>添加到<code>@Configuration</code>类中</p>\n</li>\n<li><p>用<code>@Component</code>定义bean元数据：将bean定义元数据贡献给容器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class FactoryMethodComponent &#123;\n    @Bean\t&#x2F;&#x2F;表示工厂方法和其它bean定义属性\n    @Qualifier(&quot;public&quot;)\n    public TestBean publicInstance() &#123;\n        return new TestBean(&quot;publicInstance&quot;);\n    &#125;\n\n    public void doWork() &#123;\n        &#x2F;&#x2F; Component method implementation omitted\n    &#125;\n&#125;</code></pre></li>\n</ol>\n</li>\n<li><p><code>@Configuration</code></p>\n<ol>\n<li><p>用<code>@Configuration</code>注释一个类表明一个对象时bean定义的来源，此外，<code>Configuration</code>类允许通过调用同一类中的其它<code>@Bean</code>方法来定义bean间的依赖关系</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class AppConfig &#123;\n    @Bean\n    public MyService myService() &#123;\n        return new MyServiceImpl();\n    &#125;\n&#125;\n&#x2F;&#x2F;与下面xml语句相同：\n&#x2F;&#x2F;&lt;beans&gt;\n&#x2F;&#x2F;    &lt;bean id&#x3D;&quot;myService&quot; class&#x3D;&quot;com.acme.services.MyServiceImpl&quot;&#x2F;&gt;\n&#x2F;&#x2F;&lt;&#x2F;beans&gt;</code></pre></li>\n<li><p>当<code>@Configuration</code>类作为输入提供时，<code>@Configuration</code>类本身被注册为bean定义，并且类中所有声明的<code>@Bean</code>方法也被注册为bean定义，使用<code>AnnotationConfigApplicationContext</code>访问</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    ApplicationContext ctx &#x3D; new AnnotationConfigApplicationContext(AppConfig.class);\n    MyService myService &#x3D; ctx.getBean(MyService.class);\n    myService.doStuff();\n&#125;</code></pre></li>\n<li></li>\n</ol>\n</li>\n<li><p><code>@Bean</code></p>\n<ol>\n<li><p>用于表示一个方法实例化、配置和初始化一个由IoC容器管理的新对象，与<code>&lt;beans/&gt;</code>元素的作用相同。可以使用此方法来制定为方法返回值的类型的<code>ApplicationContext</code>中注册bean定义。可以和任何Spring的<code>@Component</code>一起使用，但是通常与<code>@Configuration</code>bean一起使用。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class AppConfig &#123;\n    @Bean&#x2F;&#x2F;默认情况，bean名称与方法名称相同\n    public TransferServiceImpl transferService() &#123;\n        return new TransferServiceImpl();\n    &#125;\n    &#x2F;&#x2F;可以有任意数量的参数来描述构建该bean所需的依赖项\n    &#x2F;&#x2F;@Bean\n    &#x2F;&#x2F; public TransferService transferService(AccountRepository accountRepository) &#123;\n    &#x2F;&#x2F;     return new TransferServiceImpl(accountRepository);\n    &#x2F;&#x2F;&#125;\n&#125;</code></pre></li>\n<li></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"2-AutoConfiguration\"><a href=\"#2-AutoConfiguration\" class=\"headerlink\" title=\"2.AutoConfiguration\"></a>2.AutoConfiguration</h2><ol>\n<li></li>\n</ol>\n<h2 id=\"3-SpringApplication\"><a href=\"#3-SpringApplication\" class=\"headerlink\" title=\"3.SpringApplication\"></a>3.SpringApplication</h2>","feature":true,"text":"Spring Boot1.Annotation @Autowired：原理见自动装配 用在构造函数上，Spring4.3开始不再需要，但如果有多个构造函数则需要使用 public class MovieRecommender &#123; private final Custom...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"tools","slug":"tools","count":6,"path":"api/tags/tools.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring-Boot\"><span class=\"toc-text\">Spring Boot</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Annotation\"><span class=\"toc-text\">1.Annotation</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-AutoConfiguration\"><span class=\"toc-text\">2.AutoConfiguration</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-SpringApplication\"><span class=\"toc-text\">3.SpringApplication</span></a></li></ol></li></ol>","author":{"name":"Dajunnnnnn","slug":"blog-author","avatar":"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/dajunnnnnn_psychedelic_eagle_neon_colors_comic_illustration_1ca2dde3-db58-4c04-b835-42e21feffbe8.PNG","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"JVM","date":"2023-05-10T07:25:10.444Z","updated":"2023-05-10T07:25:14.218Z","comments":true,"path":"api/articles/JVM.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Dajunnnnnn","slug":"blog-author","avatar":"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/dajunnnnnn_psychedelic_eagle_neon_colors_comic_illustration_1ca2dde3-db58-4c04-b835-42e21feffbe8.PNG","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"SpringCloud","uid":"2fdfe1e1ace8a4912a23a4cbc1c92824","slug":"SpringCloud","date":"2023-05-09T08:41:29.000Z","updated":"2023-05-09T08:44:35.338Z","comments":true,"path":"api/articles/SpringCloud.json","keywords":null,"cover":null,"text":"Spring Cloud1.Consul2.OpenFeign3.Resilience4j4.SpringBootAdmin5.Sleuth6.Seata7.RabbitMQ8.Gateway","link":"","photos":[],"count_time":{"symbolsCount":96,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"tools","slug":"tools","count":6,"path":"api/tags/tools.json"}],"author":{"name":"Dajunnnnnn","slug":"blog-author","avatar":"https://macro---oss2.oss-cn-beijing.aliyuncs.com/img/dajunnnnnn_psychedelic_eagle_neon_colors_comic_illustration_1ca2dde3-db58-4c04-b835-42e21feffbe8.PNG","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}